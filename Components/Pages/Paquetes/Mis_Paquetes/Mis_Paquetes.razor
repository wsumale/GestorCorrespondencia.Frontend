@page "/paquetes/mis-paquetes"

@using GestorCorrespondencia.Frontend.Model.Paquetes.Rastrear_Paquete

@using System.Text.Json

@using GestorCorrespondencia.Frontend.Services
@inject LayoutService LayoutService

@code {
    List<Paquete> paquetes = new();

    private List<string> ubicacionDestino = new() { "", "Oficinas Z 12", "Unicap", "Unipark" };
    private List<string> destinos = new() { "", "Contabilidad", "RRHH", "Sistemas" };
    private List<string> tipos = new() { "Documentos", "Paquete", "Carta", "Caja" };
    private List<string> usuarioDestino = new() { "", "Cesar Mata", "Pablo Merida", "Luis Toledo" };

    protected override void OnInitialized()
    {
        LayoutService.ActualizarHeader("Mis Paquetes");
        var random = new Random();

        for (int i = 1; i <= 20; i++)
        {
            paquetes.Add(new Paquete
            {
                NumeroRastreo = $"PKT-{1000 + i}",
                UbicacionOrigen = ubicacionDestino[random.Next(1, ubicacionDestino.Count)],
                Origen = destinos[random.Next(1, destinos.Count)],
                UbicacionDestino = ubicacionDestino[random.Next(1, ubicacionDestino.Count)],
                Destino = destinos[random.Next(1, destinos.Count)],
                EmailRemitente = $"remitente{i}@correo.com",
                NombreRemitente = $"Remitente {i}",
                EmailDestinatario = $"destinatario{i}@correo.com",
                NombreDestinatario = $"Destinatario {i}",
                Observaciones = $"Observaciones del paquete {i}",
                Fecha_Envio = DateTime.Now.AddDays(-random.Next(0, 30)),
                Detalles = new List<DetallePaquete>
                {
                    new DetallePaquete
                    {
                        Tipo = tipos[random.Next(tipos.Count)],
                        Comentarios = $"Comentario {i}",
                        Cantidad = random.Next(1, 5)
                    }
                }
            });
        }
    }
}

<div class="main-container" style="max-width: 100%; width: 100%; margin-top: 0;">
    <h3 class="form-title">Mis Paquetes</h3>

    <RadzenRow style="margin-bottom: 1rem;">
        <RadzenColumn Size="3">
            <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H3" Text="Ubicación Destino:" />
            <RadzenDropDown Data="@ubicacionDestino" @bind-Value="selectedUbicacionDestino"
                            Placeholder="Seleccione ubicación destino"
                            Change="@(args => StateHasChanged())"
                            Disabled="@(selectedPaquetes?.Count > 0)" />
        </RadzenColumn>
        <RadzenColumn Size="3">
            <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H3" Text="Destino:" />
            <RadzenDropDown Data="@destinos" @bind-Value="selectedDestino"
                            Placeholder="Seleccione destino"
                            Change="@(args => StateHasChanged())" />
        </RadzenColumn>
        <RadzenColumn Size="3">
            <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H3" Text="Usuario Recepción:" />
            <RadzenDropDown Data="@usuarioDestino" @bind-Value="selectedUsuario"
                            Placeholder="Seleccione usuario"
                            Change="@(args => StateHasChanged())" />
        </RadzenColumn>
        <RadzenColumn Size="3" class="rz-display-flex rz-flex-column rz-align-items-start rz-justify-content-end">
            <RadzenButton Text="Enviar Consolidado" />
        </RadzenColumn>
    </RadzenRow>

    <RadzenDataGrid Data="@paquetesFiltrados" AllowPaging="true" PageSize="10"
                    AllowRowSelectOnRowClick="@allowRowSelectOnRowClick" SelectionMode="DataGridSelectionMode.Single"
                    AllowSorting="true" AllowFiltering="true" @bind-Value=@selectedPaquete>
        <Columns>
            <RadzenDataGridColumn Property="NumeroRastreo" Title="Rastreo" />
            <RadzenDataGridColumn Property="Fecha_Envio" Title="Fecha Envío" FormatString="{0:d}" />
            <RadzenDataGridColumn Property="NombreRemitente" Title="Remitente" />
            <RadzenDataGridColumn Property="UbicacionOrigen" Title="Ubicación Origen" />
            <RadzenDataGridColumn Property="NombreDestinatario" Title="Destinatario" />
            <RadzenDataGridColumn Property="UbicacionDestino" Title="Ubicación Destino" />
            <RadzenDataGridColumn Property="Destino" Title="Destino" />
        </Columns>
    </RadzenDataGrid>
</div>

@code {
    bool allowRowSelectOnRowClick = true;
    private IEnumerable<Paquete> paquetesFiltrados =>
        paquetes.Where(p =>
            (string.IsNullOrEmpty(selectedUbicacionDestino) || p.UbicacionDestino == selectedUbicacionDestino) &&
            (string.IsNullOrEmpty(selectedDestino) || p.Destino == selectedDestino));

    private string? selectedUbicacionDestino;
    private string? selectedDestino;
    private string? selectedUsuario;
    IList<Paquete> selectedPaquetes = new List<Paquete>();
    IList<Paquete> selectedPaquete = new List<Paquete>();
}
