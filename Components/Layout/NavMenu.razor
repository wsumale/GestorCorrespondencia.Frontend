@using GestorCorrespondencia.Frontend.Services
@inject LayoutService LayoutService

<RadzenSidebar Expanded="@(sidebarExpanded)" Responsive="false">
    <RadzenPanelMenu>
        <RadzenStack class="sidebar-container-logo">
            <RadzenImage Path="/images/Unisuper.png" class="sidebar-logo" />
            <RadzenText TextStyle="TextStyle.H4" class="sidebar-logo-title">Gestor de<br />Correspondencia</RadzenText>
            <hr class="rz-w-100" />
        </RadzenStack>

        <RadzenPanelMenuItem Text="Inicio" Icon="home" Path="/home" />
        <span class="rz-text-disabled-color">– Paquetes</span>
        <RadzenPanelMenuItem Text="Enviar Paquete" Icon="box_add" Path="/enviar-paquete" />
        <RadzenPanelMenuItem Text="Rastrear Paquete" Icon="location_searching" Path="/rastrear-paquete" />
        <RadzenPanelMenuItem Text="Mis Paquetes" Icon="package" Path="/paquetes/mis-paquetes" />
        <RadzenPanelMenuItem Text="Consolidado Usuario" Icon="package_2" Path="/consolidado/usuario" />
        <span class="rz-text-disabled-color">- Correspondencia</span>
        <RadzenPanelMenuItem Text="Consolidado Correspondencia" Icon="package_2" Path="/consolidado/correspondencia" />
    </RadzenPanelMenu>
</RadzenSidebar>

@code {
    private bool sidebarExpanded;
    private string _searchModule = string.Empty;

    protected override void OnInitialized()
    {
        // Obtener el estado inicial del sidebar desde el servicio
        sidebarExpanded = LayoutService.GetSidebarExpanded();
        // Suscribirse a cambios
        LayoutService.OnSidebarExpandedChanged += OnSidebarStateChanged;
    }

    private void OnSidebarStateChanged(bool expanded)
    {
        sidebarExpanded = expanded;
        InvokeAsync(StateHasChanged);
    }

    private void SearchModule(ChangeEventArgs args)
    {
        _searchModule = args.Value!.ToString()!;
    }
}
