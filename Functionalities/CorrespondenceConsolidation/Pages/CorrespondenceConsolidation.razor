@page "/correspondencia/consolidar_paquetes_recibidos"

@using GestorCorrespondencia.Frontend.Functionalities.Tracking.Model
@using GestorCorrespondencia.Frontend.Services.Dialogs
@using System.Text.Json

@inject CustomDialogService CustomDialogService

@code {
    Package package = new Package();
    List<Package> packages = new List<Package>();

    private List<string> ubicacionDestino = new() { "Oficinas Z 12", "Unicap", "Unipark" };
    private List<string> destinos = new() { "Contabilidad", "RRHH", "Sistemas" };
    private List<string> tipos = new() { "Documentos", "Paquete", "Carta", "Caja" };
    private List<string> usuarioDestino = new() { "Cesar Mata", "Pablo Merida", "Luis Toledo" };

    private Dictionary<int, string> ubicacionDestinoo = new Dictionary<int, string>
    {
        { 1, "Oficinas Z 12" },
        { 2, "Unicap" },
        { 3, "Unipark" }
    };

    private Dictionary<int, string> destinoss = new Dictionary<int, string>
    {
        { 1, "Contabilidad" },
        { 2, "RRHH" },
        { 3, "Sistemas" }
    };

    private Dictionary<int, string> tiposs = new Dictionary<int, string>
    {
        { 1, "Documentos" },
        { 2, "Paquete" },
        { 3, "Carta" },
        { 4, "Caja" }
    };

    protected override void OnInitialized()
    {
        var random = new Random();

        for (int i = 1; i <= 20; i++)
        {
            var package = new Package
                {
                    NumeroRastreo = $"PKT-{1000 + i}",
                    UbicacionOrigen = ubicacionDestino[random.Next(ubicacionDestino.Count)],
                    Origen = destinos[random.Next(destinos.Count)],
                    UbicacionDestino = ubicacionDestino[random.Next(ubicacionDestino.Count)],
                    Destino = destinos[random.Next(destinos.Count)],
                    EmailRemitente = $"remitente{i}@correo.com",
                    NombreRemitente = $"Remitente {i}",
                    EmailDestinatario = $"destinatario{i}@correo.com",
                    NombreDestinatario = $"Destinatario {i}",
                    Observaciones = $"Observaciones del paquete {i}",
                    Fecha_Envio = new DateTime(2025, random.Next(1, 12), random.Next(1, 28)),
                    Detalles = new List<PackageDetail>
                    {
                        new PackageDetail
                        {
                            Type = tipos[random.Next(tipos.Count)],
                            Comment = $"Comentario {i}",
                            Quantity = random.Next(1, 5)
                        }
                    }
                };

            packages.Add(package);
        }
    }
}

<SessionValidator title="Consolidar paquetes recibidos" />

<div class="main-container">

    <RadzenText Text="Consolidar paquetes" TextStyle="TextStyle.H3" class="form-title" />

    <RadzenRow class="rz-mb-3">
        <RadzenColumn Size="6" SizeXS="12" SizeSM="12" SizeMD="6" SizeLG="6" SizeXL="3" SizeXX="3">
            <RadzenDropDown Data="@ubicacionDestino" @bind-Value="selectedUbicacionDestino"
                            Placeholder="Seleccione ubicación destino"
                            Change="@(args => StateHasChanged())"
                            Disabled="@(selectedPackages != null && selectedPackages.Any())" />

            <RadzenButton ButtonStyle="ButtonStyle.Danger" 
                          Click="ClearSelectedLocation"
                          Disabled="@(selectedPackages != null && selectedPackages.Any())"
                          Icon="filter_alt_off"
                          Size="ButtonSize.Medium" />
        </RadzenColumn>
    </RadzenRow>

    <RadzenDataGrid @ref="grid" AllowRowSelectOnRowClick="@allowRowSelectOnRowClick"
                    AllowFiltering="true" ApplyFilterText="Aplicar" ClearFilterText="Limpiar"
                    FilterMode="FilterMode.CheckBoxList" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="10"
                    AllowSorting="true" Data="@filteredPackages" ColumnWidth="200px"
                    SelectionMode="DataGridSelectionMode.Multiple" @bind-Value=@selectedPackages
                    PagerHorizontalAlign="HorizontalAlign.Left">
        <Columns>
            <RadzenDataGridColumn Filterable="false" Sortable="false" Width="42px">
                <HeaderTemplate>
                    <RadzenCheckBox TabIndex="-1" TriState="false" TValue="bool?"
                                    InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select all items" }})"
                                    Value="@(selectedPackages == null || 
                                             selectedPackages?.Any() != true ? false : !filteredPackages.All(i => selectedPackages.Contains(i)) ?
                                             null : filteredPackages.Any(i => selectedPackages.Contains(i)))"
                                    Change="@(args => selectedPackages = args == true ? filteredPackages.ToList() : null)"
                                    Disabled="@(selectedUbicacionDestino == null || !selectedUbicacionDestino.Any())" />
                </HeaderTemplate>
                <Template Context="data">
                    <RadzenCheckBox TabIndex="-1" TriState="false" Value="@(selectedPackages != null && selectedPackages.Contains(data))" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Select item" }})"
                                    TValue="bool" Change=@(args => { if(!allowRowSelectOnRowClick) { grid.SelectRow(data); }}) />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="NumeroRastreo" Title="Rastreo">
                <Template Context="Package">
                    <span class="clickable-text" title="Ver detalle del paquete" @onclick:stopPropagation="true" @onclick="() => CustomDialogService.OpenViewPackage()">
                        @Package.NumeroRastreo
                    </span>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(Package.Fecha_Envio)" Title="Fecha Envio" FormatString="{0:d}" />
            <RadzenDataGridColumn Property="@nameof(Package.NombreRemitente)" Title="Remitente" />
            <RadzenDataGridColumn Property="@nameof(Package.UbicacionOrigen)" Title="Ubicación Origen" />
            <RadzenDataGridColumn Property="@nameof(Package.Origen)" Title="Origen" />
            <RadzenDataGridColumn Property="@nameof(Package.NombreDestinatario)" Title="Destinatario" />
            <RadzenDataGridColumn Property="@nameof(Package.UbicacionDestino)" Title="Ubicación Destino" />
            <RadzenDataGridColumn Property="@nameof(Package.Destino)" Title="Destino" />
        </Columns>
    </RadzenDataGrid>

    <RadzenRow class="rz-mt-3 rz-display rz-justify-content-right rz-justify-content-end">
        <RadzenButton Text="Enviar Consolidado" Click="OpenPreviewConsolidation" Disabled="@(selectedPackages == null || !selectedPackages.Any())" />
    </RadzenRow>
</div>